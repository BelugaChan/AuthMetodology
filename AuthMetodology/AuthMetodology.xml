<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AuthMetodology.API</name>
    </assembly>
    <members>
        <member name="M:AuthMetodology.API.Controllers.v1.AuthController.Register(AuthMetodology.Application.DTO.v1.RegisterUserRequestDtoV1,System.Threading.CancellationToken)">
            <summary>
            Регистрирует нового пользователя в системе.
            </summary>
            <remarks>
            ### Пример запроса:
            POST /api/v1/auth/register
            ```json
            {
                "email": "user@example.com",
                "password": "SecurePassword123!",
                "confirmPassword": "SecurePassword123!"
            }
            ```
            
            ### Требования:
            - Email: 5–30 символов, валидный формат.
            - Пароль: 8–20 символов, минимум 1 цифра, 1 спецсимвол, буквы в верхнем и нижнем регистре. Отсутствие кирилицы.
            - Пароль и подтверждение должны совпадать.
            
            ### Возвращает:
            - JWT-токены (access и refresh) в куках.
            - Данные пользователя в теле ответа.
            ```json
            {
                "userId": "7999070a-39bf-44b7-82b2-3de0de12b107",
                "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30",
                "refreshToken": "7YbHhgwhiQMqWdnw0czF1Wnp4yrHyGG0zWmgYWIL5pMNErt4FKkuNU6lZKjQjt6I",
                "requiresTwoFa": false
            }
            ```
            </remarks>
            <param name="userDto">Данные для регистрации.</param>
            <response code="200">Успешная регистрация. Возвращает AuthResponseDtoV1.</response>
            <response code="400">Невалидные данные (например, пароли не совпадают или не соблюдаются прочие условия).</response>
            <response code="409">Пользователь с таким email уже существует.</response>
            <response code="500">Прочие ошибки на стороне сервера</response>
        </member>
        <member name="M:AuthMetodology.API.Controllers.v1.AuthController.Login(AuthMetodology.Application.DTO.v1.LoginUserRequestDtoV1,System.Threading.CancellationToken)">
            <summary>
            Аутентификация существующего пользователя в системе.
            </summary>
            <remarks>
            ### Пример запроса:
            POST /api/v1/auth/login
            ```json
            {
                "email": "user@example.com",
                "password": "SecurePassword123!"
            }
            ```
            
            ### Требования:
            - Email: 5–30 символов, валидный формат.
            - Пароль: 8–20 символов, минимум 1 цифра, 1 спецсимвол, буквы в верхнем и нижнем регистре. Отсутствие кирилицы.
            
            ### Возвращает:
            - JWT-токены (access и refresh) в куках.
            - Данные пользователя в теле ответа.
            ```json
            {
                "userId": "7999070a-39bf-44b7-82b2-3de0de12b107",
                "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30",
                "refreshToken": "7YbHhgwhiQMqWdnw0czF1Wnp4yrHyGG0zWmgYWIL5pMNErt4FKkuNU6lZKjQjt6I",
                "requiresTwoFa": false/true
            }
            ```
            </remarks>
            <param name="userDto">Данные для логина.</param>
            <response code="200">Успешный логин. Возвращает AuthResponseDtoV1.</response>
            <response code="401">Некорректный пароль </response>
            <response code="500">Прочие ошибки на стороне сервера или ошибка при обновлении данных в БД</response>
        </member>
        <member name="M:AuthMetodology.API.Controllers.v1.AuthController.Refresh(AuthMetodology.Application.DTO.v1.RefreshTokenRequestDtoV1,System.Threading.CancellationToken)">
            <summary>
            Обновление пары access - refresh токенов.
            </summary>
            <remarks>
            ### Пример запроса:
            POST /api/v1/auth/refresh
            ```json
            {
                "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30",
                "refreshToken": "7YbHhgwhiQMqWdnw0czF1Wnp4yrHyGG0zWmgYWIL5pMNErt4FKkuNU6lZKjQjt6I"
            }
            ```
            
            ### Требования:
            - accessToken: обязательное поле.
            - refreshToken: обязательное поле. 
            
            ### Возвращает:
            - JWT-токены (access и refresh) в куках.
            - Данные о токенах в теле ответа.
            ```json
            {
                "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30",
                "refreshToken": "7YbHhgwhiQMqWdnw0czF1Wnp4yrHyGG0zWmgYWIL5pMNErt4FKkuNU6lZKjQjt6I"
            }
            ```
            </remarks>
            <param name="requestDto">Данные для обновления токенов.</param>
            <response code="200">Успешное обновление токенов. Возвращает RefreshResponseDtoV1.</response>
            <response code="401">Пользователь не найден в бд, либо refreshToken некорректен или у него закончилось время жизни.</response>
            <response code="500">Прочие ошибки на стороне сервера или ошибка при обновлении данных в БД</response>
        </member>
        <member name="M:AuthMetodology.API.Controllers.v1.AuthController.GoogleRegister(AuthMetodology.Application.DTO.v1.GoogleLoginUserRequestDtoV1,System.Threading.CancellationToken)">
            <summary>
            Регистрация пользователя в системе с помощью платформы Google.
            </summary>
            <remarks>
            Данный эндпоинт не проходил тестирование. Логика сохранения кук не реализована.
            ### Пример запроса:
            POST /api/v1/auth/googleRegister
            ```json
            {
                "idToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30"
            }
            ```
            
            ### Требования:
            - idToken: обязательное поле.
            
            ### Возвращает:
            - Данные пользователя в теле ответа.
            ```json
            {
                "userId": "7999070a-39bf-44b7-82b2-3de0de12b107",
                "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30",
                "refreshToken": "7YbHhgwhiQMqWdnw0czF1Wnp4yrHyGG0zWmgYWIL5pMNErt4FKkuNU6lZKjQjt6I",
                "requiresTwoFa": false/true
            }
            ```
            </remarks>
            <param name="requestDto">Данные для регистрации.</param>
            <response code="200">Успешная регистрация. Возвращает AuthResponseDtoV1.</response>
            <response code="409">Пользователь с таким email уже существует.</response>
            <response code="500">Прочие ошибки на стороне сервера или ошибка при обновлении данных в БД</response>
        </member>
        <member name="M:AuthMetodology.API.Controllers.v1.AuthController.GoogleLogin(AuthMetodology.Application.DTO.v1.GoogleLoginUserRequestDtoV1,System.Threading.CancellationToken)">
            <summary>
            Логин пользователя в системе с помощью платформы Google.
            </summary>
            <remarks>
            Данный эндпоинт не проходил тестирование. Логика сохранения кук не реализована.
            ### Пример запроса:
            POST /api/v1/auth/googleLogin
            ```json
            {
                "idToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30"
            }
            ```
            
            ### Требования:
            - idToken: обязательное поле.
            
            ### Возвращает:
            - Данные пользователя в теле ответа.
            ```json
            {
                "userId": "7999070a-39bf-44b7-82b2-3de0de12b107",
                "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30",
                "refreshToken": "7YbHhgwhiQMqWdnw0czF1Wnp4yrHyGG0zWmgYWIL5pMNErt4FKkuNU6lZKjQjt6I",
                "requiresTwoFa": false/true
            }
            ```
            </remarks>
            <param name="requestDto">Данные для логина.</param>
            <response code="200">Успешный логин. Возвращает AuthResponseDtoV1.</response>
            <response code="401">Пользователь с таким email не найден или idToken некорректен</response>
            <response code="500">Прочие ошибки на стороне сервера или ошибка при обновлении данных в БД</response>
        </member>
        <member name="M:AuthMetodology.API.Controllers.v1.TestAuthController.GetTestData">
            <summary>
            Тестовый эндпоинт.
            </summary>
            <remarks>
            ### Пример запроса:
            Get /api/v1/testAuth
            ### Возвращает:
            - Данные пользователя в теле ответа.
            ```json
            {
                "Name": "Test",
                "SurName": "Testovich"
            }
            ```
            </remarks>
            <response code="200">Успешный вызов эндпоинта. Access токен в куки корректен.</response>
            <response code="401">Пользователь не прошёл аутентификацию</response>
            <response code="500">Прочие ошибки на стороне сервера</response>
        </member>
        <member name="M:AuthMetodology.API.Controllers.v1.TwoFaController.EnableTwoFa(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Активация двухфакторной аутентификации пользователя.
            </summary>
            <remarks>
            ### Пример запроса:
            PATCH /api/v1/auth/enable-2fa/7999070a-39bf-44b7-82b2-3de0de12b107
            
            ### Возвращает:
            - Уведомление о том, что двухакторка активирована.
            ```
            </remarks>
            <param name="id">Guid пользователя.</param>
            <response code="200">Успешная активация. Возвращает "2FA enabled".</response>
            <response code="401">Пользователь с таким id не найден</response>
            <response code="409">Двухфакторка уже активирована.</response>
            <response code="500">Прочие ошибки на стороне сервера или ошибка при обновлении данных в БД</response>
        </member>
        <member name="M:AuthMetodology.API.Controllers.v1.TwoFaController.DisableTwoFa(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Деактивация двухфакторной аутентификации пользователя.
            </summary>
            <remarks>
            ### Пример запроса:
            PATCH /api/v1/auth/disable-2fa/7999070a-39bf-44b7-82b2-3de0de12b107
            
            ### Возвращает:
            - Уведомление о том, что двухакторка деактивирована.
            ```
            </remarks>
            <param name="id">Guid пользователя.</param>
            <response code="200">Успешная деактивация. Возвращает "2FA disabled".</response>
            <response code="401">Пользователь с таким id не найден</response>
            <response code="409">Двухфакторка уже деактивирована.</response>
            <response code="500">Прочие ошибки на стороне сервера или ошибка при обновлении данных в БД</response>
        </member>
        <member name="M:AuthMetodology.API.Controllers.v1.TwoFaController.VerifyTwoFa(AuthMetodology.Application.DTO.v1.TwoFaRequestDtoV1,System.Threading.CancellationToken)">
            <summary>
            Проверяет код двухфакторной аутентификации.
            </summary>
            <remarks>
            ### Пример запроса:
            POST /api/v1/auth/verify-2fa
            ```json
            {
                "id": "7999070a-39bf-44b7-82b2-3de0de12b107",
                "code": "123456"
            }
            ```
            
            ### Требования:
            - id: обязательное поле.
            - code: обязательное поле.
            
            ### Возвращает:
            - Данные пользователя в теле ответа.
            ```json
            {
                "userId": "7999070a-39bf-44b7-82b2-3de0de12b107",
                "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30",
                "refreshToken": "7YbHhgwhiQMqWdnw0czF1Wnp4yrHyGG0zWmgYWIL5pMNErt4FKkuNU6lZKjQjt6I",
                "requiresTwoFa": false
            }
            ```
            </remarks>
            <param name="requestDto">Данные для проверки кода двухфакторной аутентификации.</param>
            <response code="200">Успешная проверка. Возвращает AuthResponseDtoV1.</response>
            <response code="401">Пользователь с таким id не найден в системе</response>
            <response code="500">Прочие ошибки на стороне сервера</response>
        </member>
        <member name="M:AuthMetodology.API.Controllers.v1.TwoFaController.ResendTwoFa(AuthMetodology.Application.DTO.v1.ReSendTwoFaRequestDtoV1,System.Threading.CancellationToken)">
            <summary>
            Повторная отправка кода двухфакторной аутентификации.
            </summary>
            <remarks>
            ### Пример запроса:
            POST /api/v1/auth/resend-2fa
            ```json
            {
                "email": "abc@mail.com"
            }
            ```
            
            ### Требования:
            - email: обязательное поле.
            
            ### Возвращает:
            - Уведомление о том, что код был успешно отправлен.
            </remarks>
            <param name="requestDto">Данные для проверки кода двухфакторной аутентификации.</param>
            <response code="200">Успешная отправка кода. Возвращает строку "Код отправлен повторно".</response>
            <response code="401">Пользователь с таким email не найден в системе</response>
            <response code="500">Прочие ошибки на стороне сервера</response>
        </member>
    </members>
</doc>
